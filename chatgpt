répartiton partie 3:

Paula; 3.2 et 3.5

Nour: 3.3 et 3.4

répartition partie 4:

Paula: 4.2

Nour: 4.1

update dans animal

bool Animal::matable(OrganicEntity const* other) const {
    if (other->matable(this) && this->matable(other)) {
        return true;
    }
}
bool Animal::canMate(Scorpion const* scorpion) const {
    return false;
}
bool Animal::canMate(Lizard const* lizard) const {
    return false;
}
bool Animal::canMate(Cactus const* food) const {
    return false;
}
sf::Texture& Animal::getTexture() {
    return getAppTexture(ANIMAL_TEXTURE);
}

dans animal hpp:
 
virtual bool matable(OrganicEntity const* other) const override;
        virtual bool canMate(Scorpion const* scorpion) const override;
        virtual bool canMate(Lizard const* lizard) const override;
        virtual bool canMate(Cactus const* food) const override;

dans lizard cpp:

bool Lizard::matable(OrganicEntity const* other) const {
    if (other->matable(this) && this->matable(other)) {
        return true;
    }
}
bool Lizard::canMate(Scorpion const* scorpion) const {
    return false;
}
bool Lizard::canMate(Lizard const* lizard) const { //il manque si enceinte ou accouche
    if (this != lizard) {
        return false;
    }
    if (this->getSex() == lizard->getSex()){
        return false;
    }
    if (getSex()){
        if (getEnergie() < getAppConfig().lizard_energy_min_mating_female) {
            return false;
        } else {
            if (getEnergie() < getAppConfig().lizard_energy_min_mating_male) {
                return false;
            }
        }
    }
    if (getAge().asSeconds() < getAppConfig().lizard_min_age_mating) {
        return false;
    }
    return true;
}
bool Lizard::canMate(Cactus const* food) const {
    return false;
}

double Lizard::getEnergyLossFactor() const {
    return getAppConfig().lizard_energy_loss_factor;
}

dans lizard hpp:
   bool matable(OrganicEntity const* other) const override;
    bool canMate(Scorpion const* scorpion) const override;
    bool canMate(Lizard const* lizard) const override;
    bool canMate(Cactus const* food) const override;
    virtual double getEnergyLossFactor() const override;

dans scorpion cpp:
bool Scorpion::matable(OrganicEntity const* other) const {
    if (other->matable(this) && this->matable(other)) {
        return true;
    }
}
bool Scorpion::canMate(Scorpion const* scorpion) const { //il manque si enceinte ou accouche
    if (this != scorpion) {
        return false;
    }
    if (this->getSex() == scorpion->getSex()){
        return false;
    }
    if (getSex()){
        if (getEnergie() < getAppConfig().scorpion_energy_min_mating_female) {
            return false;
        } else {
            if (getEnergie() < getAppConfig().scorpion_energy_min_mating_male) {
                return false;
            }
        }
    }
    if (getAge().asSeconds() < getAppConfig().scorpion_min_age_mating) {
        return false;
    }
    return true;
}
bool Scorpion::canMate(Lizard const* lizard) const {
    return false;
}
bool Scorpion::canMate(Cactus const* food) const {
    return false;
}
double Scorpion::getEnergyLossFactor() const {
     return getAppConfig().scorpion_energy_loss_factor;
 }
 scorpion hpp:
 bool matable(OrganicEntity const* other) const override;
    bool canMate(Scorpion const* scorpion) const override;
    bool canMate(Lizard const* lizard) const override;
    bool canMate(Cactus const* food) const override;
virtual double getEnergyLossFactor() const override;

cactus cpp:
bool Cactus::matable(OrganicEntity const* other) const {
     if (other->matable(this) && this->matable(other)) {
         return true;
     }
 }

 bool Cactus::canMate(Scorpion const* scorpion) const {
     return false;
 }
 bool Cactus::canMate(Lizard const* lizard) const {
     return false;
 }
 bool Cactus::canMate(Cactus const* food) const {
     return false;
 }
cactus hpp:
 bool matable(OrganicEntity const* other) const ;
        bool canMate(Scorpion const* scorpion) const;
        bool canMate(Lizard const* lizard) const ;
        bool canMate(Cactus const* food) const ;
dans organic entity cpp:
double OrganicEntity::getTaille(){
     return getRadius();
 }
bool OrganicEntity::isDead (){
     bool retour = false;
     if ((Energie < getAppConfig().animal_min_energy) or (Age > Longevite)) {
         retour = true;
     }
         return retour;
 }

 void OrganicEntity::updateAge(sf::Time dt){
     Age += dt;
 }
bool OrganicEntity::matable(OrganicEntity const* other) const {
     return false;
 }
  bool OrganicEntity::canMate(Scorpion const* scorpion) const {
      return false;
  }
  bool OrganicEntity::canMate(Lizard const* lizard) const {
      return false;
  }

  bool OrganicEntity::canMate(Cactus const* food) const {
      return false;
  }
  sf::Time OrganicEntity::getAge() const {
      return Age;
  }
