/*void Animal::update(sf::Time dt){
    auto& env = getAppEnv();
    std::list<Vec2d> ciblesPotentielles = env.getTargetsInSightForAnimal(this);
    Vec2d f;

    if (ciblesPotentielles.empty()) {
        // Aucun cible visible -> random walk
        f = randomWalk(PositionCible);
    } else {
        // Choisir une cible visible
        PositionCible = ciblesPotentielles.front();
        f = ForceAttraction(Deceleration::moyenne);
    }

    Vec2d acceleration = f / getMass();
    Vec2d nouvelle_vitesse = getSpeedVector() + acceleration * dt.asSeconds();
    Vec2d nouvelle_direction = nouvelle_vitesse.normalised();

    if (nouvelle_vitesse.length() > getStandardMaxSpeed()) {
        nouvelle_vitesse = nouvelle_direction * getStandardMaxSpeed();
    }

    if (!isEqual(nouvelle_direction.lengthSquared(), 0.0)) {
        Direction = nouvelle_direction;
    }


    MagnitudeVitesse = nouvelle_vitesse.length();

    Vec2d old_position = getPosition();
    Vec2d nouvelle_position = old_position + nouvelle_vitesse * dt.asSeconds();
    Vec2d dx = nouvelle_position - old_position;

    move(dx);
}
*/

